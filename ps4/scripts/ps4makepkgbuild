 # *************************************************************************
 #  ps4makepkgbuild                                                        *
 # *************************************************************************
 #                         This file is part of:                          *
 #                          PS4 PACKGE MANAGER                            *
 #                     https://github.com/ps4linux-package-manager        *
 # ************************************************************************
 #
 #  Copyright (c) 2024 TigerClips1 <tigerclips1@ps4repo.site>
 #
 #  This program is free software; you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation; either version 2 of the License, or
 #  (at your option) any later version.
 #
 #  This program is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 #
 #  You should have received a copy of the GNU General Public License
 #  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 #

#! /usr/bin/env bash

SCRIPTNAME="$(basename "$0")"

SAVED_ARGS="$@"

# Check if PKGBUILD exists in the current directory and exit if not
if [ ! -f PKGBUILD ]; then
    echo "PKGBUILD not found in current directory"
    exit 1
fi


# Source the PKGSCRIPT
. PKGBUILD
PKGBUILDIR="$(pwd)"

# Package building functions

function make_package() {
    echo "=== Building ${NAME} v${VERSION}-${UPSTREAM} ==="
    cd ${PKGBUILDIR}

    mkdir -p "${NAME}-${VERSION}-${UPSTREAM}"
    cd "${NAME}-${VERSION}-${UPSTREAM}"
    mkdir -p export/data

    WORKDIR="$(pwd)"
    BUILD_DATA_ROOT="${WORKDIR}/export/data"
    BUILD_ROOT="${WORKDIR}/export"

    # Download from SRC array with curl
    for i in "${!SRC[@]}"; do
        # Clear SRC_URL and SRC_FOLDER
        SRC_URL=""
        SRC_FOLDER=""
        
        # Check if a | is present in the URL, split it if it is as the 2nd array element will be the extracted folder name
        if [[ "${SRC[$i]}" =~ "|" ]]; then
            SRC_URL="${SRC[$i]%%|*}"
            SRC_FOLDER="${SRC[$i]##*|}"
        else
            SRC_URL="${SRC[$i]}"
        fi


        if [[ -f "${PKGBUILDIR}/${SRC_URL}" ]]; then
            echo "=== Using local file ${PKGBUILDIR}/${SRC_URL} ==="
            cp -r "${PKGBUILDIR}/${SRC_URL}" "${WORKDIR}"
            continue
        else
            if ! curl --head --output /dev/null --silent --fail ${SRC_URL};
            then
                echo "=== Invalid URL/Path! ==="
                exit 1
            fi
        fi

        echo "=== Downloading from ${SRC_URL} ==="
        curl -L "${SRC_URL}" -o "$(basename ${SRC_URL})"
        
        # Will use this later
        # # Verify the download with a checksum from SUM array
        # if [ "${SUM_TYPE}" = "sha512" ]; then
        #     if  ! [ "${SUM[i]}" = "$(sha512sum "$(basename ${SRC_URL})" | cut -d ' ' -f 1)" ]; then
        #         echo "=== Checksum mismatch! ==="
        #         exit 1
        #     fi
        # elif [ "${SUM_TYPE}" = "sha256" ]; then
        #     if ! [ "${SUM[i]}" = "$(sha256sum "$(basename ${SRC_URL})" | cut -d ' ' -f 1)" ]; then
        #         echo "=== Checksum mismatch! ==="
        #         exit 1
        #     fi
        # elif [ "${SUM_TYPE}" = "md5" ]; then
        #     if ! [ "${SUM[i]}" = "$(md5sum "$(basename ${SRC_URL})" | cut -d ' ' -f 1)" ]; then
        #         echo "=== Checksum mismatch! ==="
        #         exit 1
        #     fi
        # fi

        # TODO figure out how to make a better way on extrecting all posable archvie format 
        if [ "$(file -b --mime-type "$(basename ${SRC_URL})" | cut -d '/' -f 1)" = "application" ]; then
            # Check if the SRC_FOLDER is set
            if [ -n "${SRC_FOLDER}" ]; then
                mkdir ${WORKDIR}/${SRC_FOLDER}
                if [ "$(file -b --mime-type "$(basename ${SRC_URL})" | cut -d '/' -f 2)" = "gzip" ]; then
                    echo "=== Extracting $(basename ${SRC_URL}) into ${SRC_FOLDER} ==="
                    tar xvzf "$(basename ${SRC_URL})" -C ${SRC_FOLDER}
                elif [ "$(file -b --mime-type "$(basename ${SRC_URL})" | cut -d '/' -f 2)" = "x-xz" ]; then
                    echo "=== Extracting $(basename ${SRC_URL}) into ${SRC_FOLDER} ==="
                    tar xvJf "$(basename ${SRC_URL})" -C ${SRC_FOLDER}
                elif [ "$(file -b --mime-type "$(basename ${SRC_URL})" | cut -d '/' -f 2)" = "x-bzip2" ]; then
                    echo "=== Extracting $(basename ${SRC_URL}) into ${SRC_FOLDER} ==="
                    tar xvjf "$(basename ${SRC_URL})" -C ${SRC_FOLDER}
                elif [ "$(file -b --mime-type "$(basename ${SRC_URL})" | cut -d '/' -f 2)" = "x-tar" ]; then
                    echo "=== Extracting $(basename ${SRC_URL}) into ${SRC_FOLDER} ==="
                    tar xvf "$(basename ${SRC_URL})" -C ${SRC_FOLDER}
                elif [ "$(file -b --mime-type "$(basename ${SRC_URL})" | cut -d '/' -f 2)" = "zip" ]; then
                    echo "=== Extracting $(basename ${SRC_URL}) into ${SRC_FOLDER} ==="
                    unzip "$(basename ${SRC_URL})" -d ${SRC_FOLDER}
                fi
            else
                if [ "$(file -b --mime-type "$(basename ${SRC_URL})" | cut -d '/' -f 2)" = "gzip" ]; then
                    echo "=== Extracting $(basename ${SRC_URL}) ==="
                    tar xvzf "$(basename ${SRC_URL})"
                elif [ "$(file -b --mime-type "$(basename ${SRC_URL})" | cut -d '/' -f 2)" = "x-xz" ]; then
                    echo "=== Extracting $(basename ${SRC_URL}) ==="
                    tar xvJf "$(basename ${SRC_URL})"
                elif [ "$(file -b --mime-type "$(basename ${SRC_URL})" | cut -d '/' -f 2)" = "x-bzip2" ]; then
                    echo "=== Extracting $(basename ${SRC_URL}) ==="
                    tar xvjf "$(basename ${SRC_URL})"
                elif [ "$(file -b --mime-type "$(basename ${SRC_URL})" | cut -d '/' -f 2)" = "x-tar" ]; then
                    echo "=== Extracting $(basename ${SRC_URL}) ==="
                    tar xvf "$(basename ${SRC_URL})" 
                elif [ "$(file -b --mime-type "$(basename ${SRC_URL})" | cut -d '/' -f 2)" = "zip" ]; then
                    echo "=== Extracting $(basename ${SRC_URL}) ==="
                    unzip "$(basename ${SRC_URL})"
                fi
            fi
        fi
    done    

    cd ${WORKDIR}
    prepare || echo "=== Skipping prepare... ==="
    cd ${WORKDIR}
    build || echo "=== Skipping build... ==="

    # Enter fakeroot to do the packaging
    enter_fakeroot

    cd ${WORKDIR}

    # Compress the build data root into the package
    echo "=== Compressing ${NAME}-${VERSION}-${UPSTREAM} ==="

    cd ${BUILD_DATA_ROOT}

    tar cvf "${BUILD_ROOT}/data.tar" ./*

    gzip -9  "${BUILD_ROOT}/data.tar"
    #DATA_SHA=$(sha512sum "${BUILD_ROOT}/data.tar.gz" | cut -d ' ' -f 1)

    cd ${BUILD_ROOT}
    cat << EOL > PS4PKG
{
    "name": "${NAME}",
    "version": "${VERSION}",
    "upstream": ${UPSTREAM},
    "description": "${DESC}",
    "groups": "$(join_by , "${GRPS[@]}")",
    "url": "${URL}",
    "license": "$(join_by , "${LICENSES[@]}")",
    "depends": "$(join_by , "${DEPENDS[@]}")",
    "optional_depends": "$(join_by , "${OPT_DEPENDS[@]}")",
    "provides": "$(join_by , "${PROVIDES[@]}")",
    "conflicts": "$(join_by , "${CONFLICTS[@]}")",
    "replaces": "$(join_by , "${REPLACES[@]}")",
}
EOL

    tar cvf "${PKGBUILDIR}/${NAME}-${VERSION}-${UPSTREAM}.tar" PS4PKG data.tar.gz
    gzip -9  "${PKGBUILDIR}/${NAME}-${VERSION}-${UPSTREAM}.tar"

    echo "=== Done building ${NAME} v${VERSION}-${UPSTREAM}, see ${PKGBUILDIR}/${NAME}-${VERSION}-${UPSTREAM}.tar.gz ==="

    return 0
}

function install_package() {
    echo "=== Installing ${NAME} v${VERSION}-${UPSTREAM} ==="
    cd ${PKGBUILDIR}

    ps4 li "${NAME}-${VERSION}-${UPSTREAM}.tar.gz"

    return 0
}

# Clean the package build directory
function clean_package() {
    echo "=== Cleaning ${NAME} v${VERSION}-${UPSTREAM} ==="
    cd ${PKGBUILDIR}

    rm -r "${NAME}-${VERSION}-${UPSTREAM}"
    rm "${NAME}-${VERSION}-${UPSTREAM}.tar.gz"

    return 0
}

function do_fakeroot_package() {
    cd "${NAME}-${VERSION}-${UPSTREAM}"

    WORKDIR="$(pwd)"
    BUILD_DATA_ROOT="${WORKDIR}/export/data"
    BUILD_ROOT="${WORKDIR}/export"

    cd ${WORKDIR}
    postbuild || echo "=== Skipping postbuild... ==="

    return 0;
}

function create_SRCINFO() {
    cat << EOL > .SRCINFO
{
    "name": "${NAME}",
    "version": "${VERSION}",
    "upstream": ${UPSTREAM},
    "description": "${DESC}",
    "groups": $(jsonify "${GRPS[@]}"),
    "url": "${URL}",
    "license": $(jsonify "${LICENSES[@]}"),
    "depends": $(jsonify "${DEPENDS[@]}"),
    "optional_depends": $(jsonify "${OPT_DEPENDS[@]}"),
    "make_depends": $(jsonify "${MK_DEPENDS[@]}"),
    "provides": $(jsonify "${PROVIDES[@]}"),
    "conflicts": $(jsonify "${CONFLICTS[@]}"),
    "replaces": $(jsonify "${REPLACES[@]}"),
    "maintainers": $(jsonify "${MAINTAINERS[@]}")
}
EOL
}

# Misc functions

function join_by { 
    local d=${1-} f=${2-}; 
    if shift 2; 
    then 
        printf %s "$f" "${@/#/$d}"; 
    fi; 
}

function jsonify {
    echo -n '['
    while [ $# -gt 0 ]; do
        x=${1//\\/\\\\}
        echo -n \"${x//\"/\\\"}\"
        [ $# -gt 1 ] && echo -n ', '
        shift
    done
    echo ']'
}

enter_fakeroot() {
	echo "=== Entering fakeroot ==="
    
    cd ${PKGBUILDIR}
	fakeroot -- bash -$- "${BASH_SOURCE[0]}" -f || return $?
}

function help() {
    echo "Usage: ${SCRIPTNAME} [OPTIONS]"
    echo "Options:"
    echo "  -h"
    echo "      Print this help message"
    echo "  -b"
    echo "      Build a package based on the PKGBUILD in the current working directory"
    echo "  -i"
    echo "      Install the built package"
    echo "  -c"
    echo "      Clean the package build directory"
}

# Get runtime flags
while getopts ":hbicpf" opt; do
    case $opt in
        h)
            help
            exit 0
            ;;
        b)
            make_package
            ;;
        i)
            install_package
            ;;
        c)
            clean_package
            ;;
        p)
            create_PKGINFO
            ;;
        f)
            cd "${PKGBUILDIR}"
            do_fakeroot_package
            echo "=== Exiting fakeroot ==="
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Exit the program if no flags are set
if [ $OPTIND -eq 1 ]; then
    echo "No flags set!"
    help
    exit 1
fi
